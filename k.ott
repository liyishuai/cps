metavar x ::= {{ com variables }}
{{ repr-locally-nameless }}
metavar i ::= {{ com integer literals }} {{ coq nat }}

grammar
t {{ tex \tau }}, s {{ tex \sigma }} :: 't_' ::= {{ com types }}
| int               ::   :: int
| void              ::   :: void
| t1 -> t2          ::   :: arr
| ( t )             :: S :: par {{ coq ([[t]]) }}

e :: 'e_' ::= {{ com annotated terms }}
| u t :: :: ann {{ tex [[u]]^[[t]] }}

u :: 'u_' ::= {{ com raw terms }}
| x             ::   :: var
| i             ::   :: int
| \ ( x : t ) . e :: :: lam (+ bind x in e +)
| e1 e2         ::   :: app
| e1 p e2       ::   :: prim
| if0 ( e1 , e2 , e3 ) :: :: if0
| let x = e in u ::  :: let (+ bind x in u +)
| halt e        ::   :: halt
| ( u )         :: S :: par {{ coq ([[u]]) }}
| u' [ u / x ]  :: M :: sub {{ coq (open_u_wrt_u [[x u']] [[u]]) }}

p :: 'p_' ::= {{ com primitives }}
| + :: :: plus
| - :: :: minus

substitutions
  single u x :: u_subst

freevars
  u x :: u_fv

grammar
G {{ tex \Gamma }} :: 'g_' ::= {{ com contexts }} {{ coq list (x * t) }}
|           :: :: empty {{ coq [] }}
| G , x : t :: :: cons  {{ coq (([[x]], [[t]]) :: [[G]]) }}

terminals :: terminals_ ::=
| int :: :: int {{ tex \mathbb Z }}
| -> :: :: to {{ tex \to }}
| void :: :: void {{ tex \mathtt{void} }}
| \ :: :: lambda {{ tex \lambda }}
| let :: :: let {{ tex \mathsf{let} }}
| in :: :: In {{ tex \mathsf{in} }}
| if0 :: :: if0 {{ tex \mathsf{if0} }}
| halt :: :: halt {{ tex \mathsf{halt} }}
| \in :: :: in {{ tex \in }}
| |-F :: :: turnstileF {{ tex \vdash_\mathrm T }}
| |-K :: :: turnstileK {{ tex \vdash_\mathrm K }}

formula :: formula_ ::=
| judgement :: :: judgement
| G ( x ) = t :: :: inG {{ coq In ([[x]], [[t]]) [[G]] }}

defns
F :: 'T_' ::=

defn
G |-F e : t :: :: ant :: 'ant_' {{ com annotated typing }}
by

G |-F u : t
----------------- :: ann
G |-F u t : t

defn
G |-F u : t :: :: term :: 'term_' {{ com typing }}
by

G ( x ) = t
--------------- :: var
G |-F x : t

----------------- :: int
G |-F i : int

G , x1 : t1 |-F e : t2
----------------------------------------------- :: lam
G |-F \ ( x1 : t1 ) . e : t1 -> t2

G |-F e1 : t1 -> t2
G |-F e2 : t1
----------------------- :: app
G |-F e1 e2 : t2

G |-F e1 : int
G |-F e2 : int
----------------------- :: prim
G |-F e1 p e2 : int

G |-F e1 : int
G |-F e2 : t
G |-F e3 : t
---------------------------------- :: if0
G |-F if0 ( e1 , e2 , e3 ) : t

defns
K :: 'K_' ::=

defn
G |-K e : t :: :: ant :: 'ant_' {{ com annotated typing }}
by
G |-K u : t
----------------- :: ann
G |-K u t : t

defn
G |-K u : t :: :: term :: 'term_' {{ com typing }}
by

G ( x ) = t
--------------- :: var
G |-K x : t

----------------- :: int
G |-K i : int

G , x : t |-K e : void
------------------------------------- :: Lam
G |-K \ ( x : t ) . e : t -> void

G |-K e : t
G , x : t |-K u : void
------------------------ :: let
G |-K let x = e in u : void

G |-K e1 : int
G |-K e2 : int
------------------------------ :: prim
G |-K e1 p e2 : int

G |-K e' : t -> void
G |-K e : t
------------------------ :: app
G |-K e' e : void

G |-K e : int
G |-K e1 : void
G |-K e2 : void
----------------------------- :: if0
G |-K if0 ( e , e1 , e2 ) : void

G |-K e : t
---------------------- :: halt
G |-K halt e : void
